---
import {
  Request as CLOUDFLARE_REQUEST,
  Response as CLOUDFLARE_RESPONSE,
} from '@cloudflare/workers-types';
import { base64URL } from '@ekwoka/alpine-history';
import Header from '../components/header.astro';
import Editor from '../components/organisms/editor.astro';
import MainLayout from '../layout/main.astro';
import type { CorePlugin } from '../lib/lazyModules/alpinePlugins';
import { PropTransformer, Struct } from '../lib/validate';
import starterHTML from '../play/starter.html?raw';
import starterScript from '../play/starter.js?raw';
import versionData from './alpine-versions';

const currentURL = new URL(Astro.request.url);
const searchParams = currentURL.searchParams;
if (searchParams.has('share')) {
  const shareKey = searchParams.get('share');
  const shareData = await Astro.locals.runtime.env.PLAY_SHARE.get(shareKey);
  const response = Astro.redirect(`${currentURL.pathname}?${shareData}`);
  Astro.locals.runtime.caches.default.put(
    new Request(currentURL, Astro.request) as unknown as CLOUDFLARE_REQUEST,
    response.clone() as unknown as CLOUDFLARE_RESPONSE,
  );
  if (shareData) return response;
}
const acceptedParams = new Struct({
  panel: new PropTransformer(
    (v: string | null): 'markup' | 'script' | 'config' =>
      v && ['markup', 'script', 'style'].includes(v)
        ? (v as 'markup' | 'script' | 'config')
        : 'markup',
  ),
  coreplugins: new PropTransformer(
    (v: string | null): CorePlugin => (v ? Number(v) : 0),
  ),
  html: new PropTransformer((v: string | null): string =>
    v ? base64URL.from(v) : starterHTML,
  ),
  script: new PropTransformer((v: string | null): string =>
    v ? base64URL.from(v) : starterScript,
  ),
  ts: new PropTransformer((v: string | null) => v === '1'),
  tw: new PropTransformer((v: string | null) => v === '1'),
  v: new PropTransformer((v: string | null): string =>
    versionData.alpinejs.includes(v) ? v : versionData.alpinejs[0],
  ),
});
const params = acceptedParams.mask(Object.fromEntries(searchParams));
---

<MainLayout title="Alpine Plays" description="Play around with AlpineJS in the browser!">
  <Header subtitle="Play Sandbox" />
  <script>
    import { Draggable } from '../components/draggablePartition.ts';
    import Alpine from 'alpinejs';
    Alpine.plugin(Draggable);
  </script>
  <main
    x-data
    x-partition
    class="flex flex-col md:flex-row flex-auto relative border-t border-gray-200 dark:border-gray-800">
    <Editor initialHTML={params.html} initialScript={params.script} activePanel={params.panel} typescript={params.ts} tailwind={params.tw} activePlugins={params.coreplugins} version={params.v}/>
    <span
      role="presentation"
      class="bg-neutral-900 md:w-1 hover:bg-neutral-700 md:hover:w-2 transition-all max-md:h-1 max-md:hover:h-2 z-100"
      x-bind="$partition.handle"></span>
    <div
      class="flex-initial flex flex-col grow border-t border-gray-200 dark:border-white/10 lg:border-0 bg-gray-50 dark:bg-black"
      :class="{ 'pointer-events-none': $partition.dragging }">
      <iframe
        title="Preview"
        class="w-full h-full bg-neutral-900 grow"
        sandbox="allow-scripts allow-pointer-lock"
        src={`/sandbox/?html=${base64URL.to(params.html)}`}></iframe>
    </div>
  </main>
</MainLayout>
