@import 'tailwindcss';

@plugin '@tailwindcss/typography';

@custom-variant dark (@media (prefers-color-scheme: dark));

/*
  The default border color has changed to `currentColor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentColor);
  }
}

@utility font-mono {
  font-family: ml, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
    'Liberation Mono', 'Courier New', monospace !important;
  font-variant-ligatures: common-ligatures !important;
  font-feature-settings:
    'calt' on,
    'liga' on,
    'ss02' on;
}

:root {
  @apply scroll-smooth scroll-pt-16 scroll-pb-32;
}

.prose {
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply scroll-mt-8;
  }
  pre:has(code) {
    @apply -mx-8;
  }

  pre code {
    @apply block text-base! font-mono! tracking-wide leading-[0.5]! text-sm;

    & .line {
      @apply block leading-loose pl-[4ch] -indent-[4ch];

      & span[style*='color:#ABB2BF']:before {
        content: ' ';
        font-size: 0;
        word-break: break-all;
      }
    }
  }
  code:not(pre code) {
    word-break: break-word;
    white-space: pre-wrap;
  }

  :is(h1, h2, h3, h4, h5, h6) code {
    &::before,
    &::after {
      content: '';
    }
  }

  :where(blockquote p:first-of-type):not(
      :where([class~='not-prose'], [class~='not-prose'] *)
    )::before {
    content: 'Note: ';
  }
  :where(blockquote p:first-of-type):not(
      :where([class~='not-prose'], [class~='not-prose'] *)
    )::after {
    content: '';
  }
}

pre.shiki {
  @apply h-full pl-[74px];
  & > code {
    @apply block text-base! font-mono! tracking-[0px] leading-[0.5]! text-sm whitespace-pre-wrap;
    counter-reset: step;
    counter-increment: step 0;

    & .line {
      @apply inline-block leading-[36px] relative tracking-[1.25px];

      &::before {
        @apply absolute right-[calc(100%_+1.62rem)] w-4 inline-block text-right text-gray-600;
        content: counter(step);
        counter-increment: step;
      }
    }
  }
}

@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-Bold.woff2);
  font-display: swap;
  font-weight: bold;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-BoldItalic.woff2);
  font-display: swap;
  font-weight: bold;
  font-style: italic;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-Light.woff2);
  font-display: swap;
  font-weight: 300;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-LightItalic.woff2);
  font-display: swap;
  font-weight: 300;
  font-style: italic;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-Medium.woff2);
  font-display: swap;
  font-weight: 500;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-MediumItalic.woff2);
  font-display: swap;
  font-weight: 500;
  font-style: italic;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-Regular.woff2);
  font-display: swap;
}
@font-face {
  font-family: ml;
  src: local(MonoLisa) url(./fonts/ml-RegularItalic.woff2);
  font-display: swap;
  font-style: italic;
}
